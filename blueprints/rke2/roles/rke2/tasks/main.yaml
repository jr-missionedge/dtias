- name: Download RKE2 install script
  ansible.builtin.get_url:
    url: https://get.rke2.io
    dest: /tmp/install-rke2.sh
    mode: '0755'
    force: no

- name: Install RKE2
  ansible.builtin.shell: INSTALL_RKE2_TYPE={{ rke2_role }} /tmp/install-rke2.sh
  register: rke2_install_result
  failed_when: rke2_install_result.rc != 0

- name: Verify RKE2 installation directory
  ansible.builtin.stat:
    path: /etc/rancher/rke2/
  register: rke2_dir_check
  failed_when: not rke2_dir_check.stat.exists

- name: Set default RKE2 role
  set_fact:
    rke2_role: server
  when: rke2_role is not defined

- name: Debug RKE2 role
  debug:
    msg: "Configuring as {{ rke2_role }}"

- name: Configure RKE2 for servers
  ansible.builtin.template:
    src: rke2-server-config.yaml.j2
    dest: /etc/rancher/rke2/config.yaml
  become: true
  when: rke2_role == "server"

- name: Configure RKE2 for agents
  ansible.builtin.template:
    src: rke2-agent-config.yaml.j2
    dest: /etc/rancher/rke2/config.yaml
  become: true
  when: rke2_role == "agent"

- name: Verify RKE2 service existence
  ansible.builtin.shell: systemctl list-unit-files | grep "rke2-{{ rke2_role }}"
  register: rke2_service_check
  failed_when: rke2_service_check.stdout.find("rke2-" + rke2_role) == -1

- name: Enable and start RKE2 service
  ansible.builtin.service:
    name: "rke2-{{ rke2_role }}"
    state: started
    enabled: true

- name: Verify RKE2 version
  ansible.builtin.command: rke2 --version
  register: rke2_version_check
  failed_when: rke2_version_check.rc != 0

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/server/node-token
  become: true
  when: rke2_role == "server"

- name: Read node-token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: node_token
  become: true
  when: rke2_role == "server"

- name: Store Master node-token
  ansible.builtin.set_fact:
    rke2_config_token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"
  when: rke2_role == "server"

- name: Check RKE2 agents for existing node-token
  ansible.builtin.command: 'grep -i "^token:" /etc/rancher/rke2/config.yaml'
  register: server_token_check
  failed_when: server_token_check.rc >= 2
  changed_when: false
  when: rke2_role == "agent"

- name: Add token to config.yaml
  ansible.builtin.lineinfile:
    dest: /etc/rancher/rke2/config.yaml
    line: "token: {{ hostvars[groups['masters'][0]].rke2_config_token }}"
    state: present
  register: node_token_added
  when:
    - rke2_role == "agent"
    #- '"token:" not in server_token_check.stdout'
    - server_token_check.rc >= 1

- name: Restart RKE2 agent if token changed
  ansible.builtin.service:
    name: "rke2-{{ rke2_role }}"
    state: restarted
    enabled: true
  when:
    - rke2_role == "agent"
    - node_token_added is changed

- name: Verify and start the correct RKE2 service
  ansible.builtin.service:
    name: "rke2-{{ rke2_role }}"
    state: started
    enabled: true
